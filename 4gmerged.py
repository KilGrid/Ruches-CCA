#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
4g_capteurs.py ‚Äî Lecture des capteurs (temp√©rature, poids) et envoi vers InfluxDB v2 via 4G
Bas√© sur le code LoRa existant, adapt√© pour envoi 4G
"""

import time
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import subprocess
import glob
import RPi.GPIO as GPIO
from hx711 import HX711
import statistics

# --- CONFIG INFLUXDB ---
INFLUX_URL   = "https://us-east-1-1.aws.cloud2.influxdata.com"
INFLUX_ORG   = "CCA Entremont"
INFLUX_BUCKET= "Ruches_Test"
INFLUX_TOKEN = "EuA5d0tQQw_Doo_ZJYmh02xZ4rkGVaebAp9SCD08YO_Ry2kdBVucAPw_CvZumOxPKN7un_zSWzUUo6QvRBaY2Q=="

DEVICE = "ruche-01"
SITE   = "cabane_xyz"
INTERVAL = 60   # secondes entre deux envois

# --- CONFIG CAPTEURS ---
# Configuration des broches pour HX711
HX711_DT = 5    # Pin DT (donn√©es, GPIO 5)
HX711_SCK = 6   # Pin SCK (horloge, GPIO 6)
scale_factor = 92  # Facteur de calibration
offset = 0         # Valeur de tare initiale

# --- SETUP INFLUXDB ---
WRITE_ENDPOINT = INFLUX_URL.rstrip("/") + "/api/v2/write"
PARAMS = {"org": INFLUX_ORG, "bucket": INFLUX_BUCKET, "precision": "s"}
HEADERS = {
    "Authorization": f"Token {INFLUX_TOKEN}",
    "Content-Type": "text/plain; charset=utf-8",
}

# Session avec retries (robuste 4G)
session = requests.Session()
retry = Retry(total=5, backoff_factor=0.5, status_forcelist=[429, 500, 502, 503, 504])
session.mount("https://", HTTPAdapter(max_retries=retry))

def charger_modules():
    """Charge les modules 1-Wire pour la temp√©rature"""
    try:
        subprocess.run(['sudo', 'modprobe', 'w1-gpio'], check=True)
        subprocess.run(['sudo', 'modprobe', 'w1-therm'], check=True)
        print("‚úÖ Modules 1-Wire charg√©s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur chargement modules: {str(e)}")
        return False

def initialiser_hx711():
    """Initialise la balance HX711"""
    try:
        GPIO.setmode(GPIO.BCM)
        hx = HX711(dout_pin=HX711_DT, pd_sck_pin=HX711_SCK, channel='A', gain=128)
        hx.reset()
        print("Mise √† z√©ro en cours... Ne placez aucun poids sur la balance.")
        raw_data = hx.get_raw_data(times=10)
        if raw_data:
            global offset
            offset = statistics.mean(raw_data)
            print(f"‚úÖ Balance HX711 initialis√©e - Valeur de tare: {offset:.2f}")
            return hx
        else:
            print("‚ùå Erreur : Impossible de lire les donn√©es brutes.")
            return None
    except Exception as e:
        print(f"‚ùå Erreur initialisation HX711: {str(e)}")
        return None

def lire_temperature():
    """Lit la temp√©rature depuis un capteur DS18B20"""
    try:
        capteurs = glob.glob('/sys/bus/w1/devices/28-*')
        if not capteurs:
            print("‚ùå Aucun capteur DS18B20 trouv√©")
            return None, "Aucun capteur trouv√©"
        
        capteur = capteurs[0]
        with open(f"{capteur}/w1_slave", 'r') as f:
            data = f.read()
        
        temp_line = data.split('\n')[1]
        temp_c = float(temp_line.split('t=')[1]) / 1000.0
        return temp_c, "OK"
    except Exception as e:
        return None, f"Erreur lecture temp√©rature: {str(e)}"

def lire_poids(hx):
    """Lit le poids depuis la balance HX711"""
    try:
        raw_data = hx.get_raw_data(times=5)
        if raw_data:
            valeur_moyenne = statistics.mean(raw_data)
            poids_grammes = (valeur_moyenne - offset) / scale_factor
            return poids_grammes, "OK"
        else:
            return None, "Erreur lecture donn√©es brutes"
    except Exception as e:
        return None, f"Erreur balance: {str(e)}"

def send_point(temp, poids, rssi=-72, snr=9.5):
    """Envoie un point de donn√©es vers InfluxDB"""
    try:
        ts = int(time.time())
        # Calcul d'une valeur de batterie simul√©e (vous pouvez l'adapter selon vos besoins)
        batt = 3.92  # Valeur fixe ou √† adapter selon votre syst√®me
        
        # Format InfluxDB Line Protocol
        line = f"air780e,device={DEVICE},site={SITE} temperature={temp:.1f},poids={poids:.2f},battery={batt},rssi={rssi}i,snr={snr} {ts}"
        
        r = session.post(WRITE_ENDPOINT, params=PARAMS, headers=HEADERS, data=line.encode("utf-8"), timeout=10)
        r.raise_for_status()
        print(f"‚úÖ envoy√© √† {time.strftime('%Y-%m-%d %H:%M:%S')} : {line}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur envoi InfluxDB: {e}")
        return False

def main():
    """Fonction principale"""
    print("üå°Ô∏è‚öñÔ∏è Mesure et envoi 4G vers InfluxDB - Raspberry Pi 5")
    print("=" * 60)
    
    # Initialisation des capteurs
    print("üîß Initialisation des capteurs...")
    if not charger_modules():
        return
    
    hx = initialiser_hx711()
    if not hx:
        return
    
    print("\n" + "=" * 60)
    print("üöÄ D√©marrage des mesures et envois 4G...")
    print("-" * 60)
    print("‚è≥ D√©marrage envoi p√©riodique vers InfluxDB‚Ä¶ (CTRL+C pour arr√™ter)")
    
    try:
        compteur = 1
        while True:
            print(f"\nüìä Mesure #{compteur}")
            
            # Lecture des capteurs
            temp, temp_message = lire_temperature()
            poids, poids_message = lire_poids(hx)
            
            if temp is not None and poids is not None:
                print(f"üå°Ô∏è Temp√©rature: {temp:.1f}¬∞C")
                print(f"‚öñÔ∏è Poids: {poids:.2f} g")
                
                # Envoi vers InfluxDB
                succes = send_point(temp=temp, poids=poids)
                if not succes:
                    print("‚ö†Ô∏è √âchec d'envoi, attente avant r√©essai...")
                    time.sleep(10)
            else:
                print(f"‚ùå Erreur capteurs - Temp: {temp_message}, Poids: {poids_message}")
                # En cas d'erreur capteurs, on peut envoyer des valeurs par d√©faut ou passer
                print("üì° Pas d'envoi √† cause des erreurs capteurs")
            
            print(f"\n‚è±Ô∏è Attente {INTERVAL} secondes avant prochaine mesure...")
            print("-" * 60)
            
            compteur += 1
            time.sleep(INTERVAL)
            
    except KeyboardInterrupt:
        print("\n\nüëã Programme arr√™t√© par l'utilisateur")
    finally:
        GPIO.cleanup()
        print("‚úÖ Nettoyage GPIO effectu√©")

if __name__ == "__main__":
    main()